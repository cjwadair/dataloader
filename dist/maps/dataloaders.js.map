{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/localforage/dist/localforage.js","src/dataloaders.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dataloaders","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","localforage","_dereq_","INTERNAL","Promise","resolver","TypeError","state","PENDING","queue","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","immediate","returnValue","handlers","reject","resolve","getThen","obj","then","apply","arguments","thenable","onError","called","onSuccess","tryToUnwrap","result","tryCatch","status","out","reason","all","iterable","allResolver","resolveFromAll","outValue","values","resolved","len","error","Object","prototype","toString","Array","race","response","REJECTED","FULFILLED","constructor","push","2","nextTick","draining","oldQueue","task","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","observer","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","3","4","_classCallCheck","instance","Constructor","getIDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isIndexedDBValid","idb","openDatabase","navigator","userAgent","test","open","IDBKeyRange","isWebSQLValid","isLocalStorageValid","localStorage","setItem","createBlob","parts","properties","Blob","name","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","type","executeCallback","callback","executeTwoCallbacks","errorCallback","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","txn","Promise$1","blob","objectStore","DETECT_BLOB_SUPPORT_STORE","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","match","matchedEdge","parseInt","_checkBlobSupport","supportsBlobs","_deferReadiness","dbInfo","dbContext","dbContexts","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_getConnection","upgradeNeeded","db","close","dbArgs","version","openreq","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","console","warn","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","target","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","arrayBuff","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_initStorage","options","ignoreErrors","forages","ready","initPromises","j","forage","slice","_defaultConfig","k","getItem","key","String","store","transaction","req","get","undefined","iterate","iterator","openCursor","iterationNumber","cursor","blobSupport","err","removeItem","clear","count","advanced","advance","keys","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","BASE_CHARS","indexOf","bufferToString","base64String","substring","serialize","valueType","toString$1","marker","SERIALIZED_MARKER","TYPE_ARRAYBUFFER","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_UINT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","fileReader","onload","str","BLOB_TYPE_PREFIX","TYPE_BLOB","readAsArrayBuffer","JSON","stringify","deserialize","SERIALIZED_MARKER_LENGTH","parse","blobType","TYPE_SERIALIZED_MARKER_LENGTH","BLOB_TYPE_PREFIX_REGEX","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","_initStorage$1","dbInfoPromise","description","size","executeSql","serializer","localforageSerializer","getItem$1","results","rows","item","iterate$1","setItem$1","originalValue","sqlError","QUOTA_ERR","removeItem$1","clear$1","length$1","c","key$1","keys$1","_initStorage$2","keyPrefix","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","length$2","removeItem$2","setItem$2","callWhenReady","localForageInstance","libraryMethod","_args","extend","arg","hasOwnProperty","isArray","isLibraryDriver","driverName","driver","DriverType","_typeof","Symbol","asyncStorage","_driver","webSQLStorage","localStorageWrapper","CustomDrivers","INDEXEDDB","LOCALSTORAGE","WEBSQL","DefaultDriverOrder","LibraryMethods","DefaultConfig","driverSupport","LocalForage","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","config","replace","defineDriver","driverObject","complianceError","namingError","customDriverMethods","concat","customDriverMethod","supportPromise","_support","supportResult","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","setDriverToConfig","initDriver","supportedDrivers","driverPromiseLoop","currentDriverIndex","_extend","_getSupportedDrivers","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js","setStorageInstances","cacheParams","setStorageInstance","log","storageInstances","cache","cacheName","maxEntries","maxAge","timeoutInSeconds","useAsKey","requestMethod","cacheFirst","url","cacheKey","requestFromCache","location","pathname","requestFromNetwork","networkFirst","timeoutId","cacheInstance","backupFromCache","networkRequest","clearTimeout","fastest","rejected","handleRejection","handleData","cacheOnly","catch","networkOnly","loadViaServiceWorker","fetch","Response","json","loadImage","loadAsBgImg","source","requestHandler","requestHandlers","requestKey","getAttribute","URL","createObjectURL","style","background","setAttribute","cacheFile","loadCssFile","el","rel","fileBlob","href","head","insertBefore","firstChild","loadScript","newElement","src","body","cachePage","urlPath","pageContent","pageStoreParams","shouldCache","request","XMLHttpRequest","responseType","readyState","DONE","updateCache","send","resultSet","getAllItems","numberOfKeys","keyFieldValue","expireOldItems","x","setItemExpiry","keyToUse","manageCacheSize","dataloaderExpiryTime","Date","now","val","numberOfEntries","entriesOverLimit","itemArray","sort","b","detectElementAdded","selector","fn","listeners","check","doc","childList","subtree","listener","elements","querySelectorAll","jLen","staticFileStore","pageStore"],"mappings":"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","file":"../dataloaders.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.4.3\n    https://mozilla.github.io/localForage\n    (c) 2013-2016 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(2);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nexports.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nexports.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nexports.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nexports.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"2\":2}],2:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(1);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"1\":1}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {}\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here; just UA test for Safari (which, as of\n        // iOS 8/Yosemite, doesn't properly support IndexedDB).\n        // IndexedDB support is broken and different from Blink's.\n        // This is faster than the test case (and it's sync), so we just\n        // do this. *SIGH*\n        // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        if (typeof openDatabase !== 'undefined' && typeof navigator !== 'undefined' && navigator.userAgent && /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent)) {\n            return false;\n        }\n\n        return idb && typeof idb.open === 'function' &&\n        // Some Samsung/HTC Android 4.0-4.3 devices\n        // have older IndexedDB specs; if this isn't available\n        // their IndexedDB is too old for us to use.\n        // (Replaces the onupgradeneeded test.)\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined' && typeof _dereq_ !== 'undefined') {\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs;\nvar dbContexts;\nvar toString = Object.prototype.toString;\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/9c25a23/src/adapters/idb/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(txn) {\n    return new Promise$1(function (resolve) {\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve) {\n        deferredOperation.resolve = resolve;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function () {\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + ' can\\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Initialize a singleton container for all running localForages.\n    if (!dbContexts) {\n        dbContexts = {};\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = {\n            // Running localForages sharing a database.\n            forages: [],\n            // Shared database.\n            db: null,\n            // Database readiness (promise).\n            dbReady: null,\n            // Deferred operations on the database.\n            deferredOperations: []\n        };\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.get(key);\n\n            req.onsuccess = function () {\n                var value = req.result;\n                if (value === undefined) {\n                    value = null;\n                }\n                if (_isEncodedBlob(value)) {\n                    value = _decodeBlob(value);\n                }\n                resolve(value);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var iterationNumber = 1;\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (cursor) {\n                    var value = cursor.value;\n                    if (_isEncodedBlob(value)) {\n                        value = _decodeBlob(value);\n                    }\n                    var result = iterator(value, cursor.key, iterationNumber++);\n\n                    if (result !== void 0) {\n                        resolve(result);\n                    } else {\n                        cursor[\"continue\"]();\n                    }\n                } else {\n                    resolve();\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // The reason we don't _save_ null is because IE 10 does\n            // not support saving the `null` type in IndexedDB. How\n            // ironic, given the bug below!\n            // See: https://github.com/mozilla/localForage/issues/161\n            if (value === null) {\n                value = undefined;\n            }\n\n            transaction.oncomplete = function () {\n                // Cast to undefined so the value passed to\n                // callback/promise is the same as what one would get out\n                // of `getItem()` later. This leads to some weirdness\n                // (setItem('foo', undefined) will return `null`), but\n                // it's not my fault localStorage is our baseline and that\n                // it's weird.\n                if (value === undefined) {\n                    value = null;\n                }\n\n                resolve(value);\n            };\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n\n            var req = store.put(value, key);\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // We use a Grunt task to make this safe for IE and some\n            // versions of Android (including those used by Cordova).\n            // Normally IE won't like `.delete()` and will insist on\n            // using `['delete']()`, but we have a build step that\n            // fixes this for us now.\n            var req = store[\"delete\"](key);\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onerror = function () {\n                reject(req.error);\n            };\n\n            // The request will be also be aborted if we've exceeded our storage\n            // space.\n            transaction.onabort = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n            var req = store.clear();\n\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.count();\n\n            req.onsuccess = function () {\n                resolve(req.result);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var advanced = false;\n            var req = store.openCursor();\n            req.onsuccess = function () {\n                var cursor = req.result;\n                if (!cursor) {\n                    // this means there weren't enough keys\n                    resolve(null);\n\n                    return;\n                }\n\n                if (n === 0) {\n                    // We have the first key, return it if that's what they\n                    // wanted.\n                    resolve(cursor.key);\n                } else {\n                    if (!advanced) {\n                        // Otherwise, ask the cursor to skip ahead n\n                        // records.\n                        advanced = true;\n                        cursor.advance(n);\n                    } else {\n                        // When we get here, we've got the nth key.\n                        resolve(cursor.key);\n                    }\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var keys = [];\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (!cursor) {\n                    resolve(keys);\n                    return;\n                }\n\n                keys.push(cursor.key);\n                cursor[\"continue\"]();\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys\n};\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        });\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // TODO: Try to re-run the transaction.\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1\n};\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = dbInfo.name + '/';\n\n    if (dbInfo.storeName !== self._defaultConfig.storeName) {\n        dbInfo.keyPrefix += dbInfo.storeName + '/';\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    // Default API, from Gaia/localStorage.\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2\n};\n\n// Custom drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar CustomDrivers = {};\n\nvar DriverType = {\n    INDEXEDDB: 'asyncStorage',\n    LOCALSTORAGE: 'localStorageWrapper',\n    WEBSQL: 'webSQLStorage'\n};\n\nvar DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nvar driverSupport = {};\n// Check to see if IndexedDB is available and if it is the latest\n// implementation; it's our preferred backend library. We use \"_spec_test\"\n// as the name of the database because it's not the one we'll operate on,\n// but it's useful to make sure its using the right spec.\n// See: https://github.com/mozilla/localForage/issues/128\ndriverSupport[DriverType.INDEXEDDB] = isIndexedDBValid();\n\ndriverSupport[DriverType.WEBSQL] = isWebSQLValid();\n\ndriverSupport[DriverType.LOCALSTORAGE] = isLocalStorageValid();\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var key in arg) {\n                if (arg.hasOwnProperty(key)) {\n                    if (isArray(arg[key])) {\n                        arguments[0][key] = arg[key].slice();\n                    } else {\n                        arguments[0][key] = arg[key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nfunction isLibraryDriver(driverName) {\n    for (var driver in DriverType) {\n        if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        this.INDEXEDDB = DriverType.INDEXEDDB;\n        this.LOCALSTORAGE = DriverType.LOCALSTORAGE;\n        this.WEBSQL = DriverType.WEBSQL;\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver);\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n                var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n                if (isLibraryDriver(driverObject._driver)) {\n                    reject(namingError);\n                    return;\n                }\n\n                var customDriverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0; i < customDriverMethods.length; i++) {\n                    var customDriverMethod = customDriverMethods[i];\n                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var supportPromise = Promise$1.resolve(true);\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        supportPromise = driverObject._support();\n                    } else {\n                        supportPromise = Promise$1.resolve(!!driverObject._support);\n                    }\n                }\n\n                supportPromise.then(function (supportResult) {\n                    driverSupport[driverName] = supportResult;\n                    CustomDrivers[driverName] = driverObject;\n                    resolve();\n                }, reject);\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var self = this;\n        var getDriverPromise = Promise$1.resolve().then(function () {\n            if (isLibraryDriver(driverName)) {\n                switch (driverName) {\n                    case self.INDEXEDDB:\n                        return asyncStorage;\n                    case self.LOCALSTORAGE:\n                        return localStorageWrapper;\n                    case self.WEBSQL:\n                        return webSQLStorage;\n                }\n            } else if (CustomDrivers[driverName]) {\n                return CustomDrivers[driverName];\n            } else {\n                throw new Error('Driver not found.');\n            }\n        });\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(function (driver) {\n                            self._extend(driver);\n                            setDriverToConfig();\n\n                            self._ready = self._initStorage(self._config);\n                            return self._ready;\n                        })[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!driverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0; i < LibraryMethods.length; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});","/* eslint-disable */\n'use strict';\n\nvar localforage = require('localforage');\n\nvar storageInstances = {};\n\nvar requestHandlers = {\n\t\"networkFirst\": networkFirst,\n  \"cacheFirst\": cacheFirst,\n  \"fastest\": fastest,\n  \"networkOnly\": networkOnly,\n  \"cacheOnly\": cacheOnly\n};\n\nvar cacheParams = {\n\tstaticFileStore: {\n\t\tcacheName: 'staticFileStore',\n\t\ttimeoutInSeconds: 2,\n\t\tmaxEntries: 50,\n\t\tmaxAge: 31536000,\n\t\tuseAsKey: 'url',\n\t\trequestMethod: 'cacheOnly'\n\t}, \n\tpageStore: {\n\t\tcacheName: 'pageStore',\n\t\ttimeoutInSeconds: 3,\n\t\tmaxEntries: 15,\n\t\tmaxAge: 12000,\n\t\tuseAsKey: 'url',\n\t\trequestMethod: 'cacheOnly'\t\t\n\t}\n}\n\nsetStorageInstances(cacheParams);\n\n/* \n\tCREATES A LOCAL STORAGE INSTANCE AND BUILDS OUT THE\n\tSTORGE INSTANCES OBJECT THAT WILL BE USED TO SET VALUES\n\tWITHIN THE DATALOADERS MODULE....\n */\nexport function setStorageInstances(cacheParams){\n\tfor (let key in cacheParams) {\n\t\tsetStorageInstance(cacheParams[key]);\n\t}\n\tconsole.log(storageInstances);\n}\n\nfunction setStorageInstance(data) {\n\tlet cache = data;\n\tlet instance = localforage.createInstance({\n\t\tname: cache.cacheName || 'dataloadersStore', \n\t\tmaxEntries: cache.maxEntries || null, \n\t\tmaxAge: cache.maxAge || null,\n\t\ttimeoutInSeconds: cache.timeoutInSeconds || null,\n\t\tuseAsKey: cache.useAsKey || null,\n\t\trequestMethod: cache.requestMethod || null\n\t});\n\tstorageInstances[cache.cacheName] = instance;\n}\n\nexport function cacheFirst(url, cacheName, cacheKey) {\n\treturn requestFromCache(cacheName, cacheKey).then(function(response){\n\t\tif(response) {\n\t\t\tconsole.log('cacheFirst: returning from cache: ', response, window.location.pathname);\n\t\t\treturn response;\n\t\t}\n\t\treturn requestFromNetwork(url, cacheName, cacheKey).then(function(response){\n\t\t\tif(response) {\n\t\t\t\tconsole.log('cacheFirst: returning from network: ', response);\n\t\t\t\treturn response; \n\t\t\t}\n\t\t}, function(err){\n\t\t\tconsole.log('error getting data from both the cache and the network', err);\n\t\t\treturn;\n\t\t});\t\n\t}, function(err){\n\t\tconsole.log('error returned form requestFromCache', err);\n\t\treturn requestFromNetwork(url, cacheName, cacheKey).then(function(response){\n\t\t\tif(response) {\n\t\t\t\treturn response; \n\t\t\t}\n\t\t}, function(err){\n\t\t\tconsole.log('error getting data from both the cache and the network', err);\n\t\t\treturn;\n\t\t});\t\n\t});\t\n}\n\nexport function networkFirst(url, cacheName, cacheKey) {\n\t\tlet timeoutId;\n\t\tlet cacheInstance = storageInstances[cacheName];\n\n\t\tvar backupFromCache = new Promise(function(resolve){\n\t\t\ttimeoutId = setTimeout(function(){\n\t\t\t\trequestFromCache(cacheName, cacheKey).then(function(response){\n\t\t\t\t\tif (response) { \n\t\t\t\t\t\tconsole.log('networkFirst request: returning from Cache: ', response);\n\t\t\t\t\t\treturn resolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, cacheInstance._config.timeoutInSeconds * 1000); \t\n\t\t});\n\n\t\tvar networkRequest = requestFromNetwork(url, cacheName, cacheKey).then(function(response){\n\t\t\tif(timeoutId) { clearTimeout(timeoutId); }\n\t\t\tif(response) {\n\t\t\t\t// console.log('networkFirst request: returning from Network: ', response);\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}, function(err){\n\t\t\tconsole.log('error returned from requestFromNetwork', err);\n\t\t});\n\n\t\treturn Promise.race([backupFromCache, networkRequest]);\n}\n\nexport function fastest(url, cacheName, cacheKey) {\n\treturn new Promise(function(resolve, reject) {\n\t\tlet rejected = false;\n\t\t\n\t\tvar handleRejection = function(err) {\n\t\t\tif (rejected){\n\t\t\t\treturn reject(Error('both cache and network requests failed'), err);\n\t\t\t} else {\n\t\t\t\tconsole.log('rejected request', err);\n\t\t\t\trejected = true;\n\t\t\t}\n\t\t};\n\n\t\tvar handleData = function(data) {\n\t\t\tif(data) { \n\t\t\t\treturn resolve(data); \n\t\t\t} else {\n\t\t\t\thandleRejection();\n\t\t\t}\n\t\t};\n\t\t\n\t\trequestFromCache(cacheName, cacheKey).then(handleData, handleRejection);\n\t\trequestFromNetwork(url, cacheName, cacheKey).then(handleData, handleRejection);\n\t});\n}\n\n/* \n\tNOTE: THERE IS AN ISSUE HERE WITH THE ORDRING OF CACHEKEY AND CACHEKEY THAT MAY NEED TO BE WORKED OUT...\n*/\nexport function cacheOnly(cacheName, cacheKey) {\n\treturn new Promise(function(resolve, reject) {\n\t\treturn requestFromCache(cacheName, cacheKey).then(function(response){\n\t\t\tif(response) { \n\t\t\t\treturn resolve(response); \n\t\t\t}\n\t\t\tconsole.log('response from cache request was blank');\n\t\t\treturn reject('error: the response from cacheOnly request came back blank');\n\t\t}).catch(function(error){\n\t\t\tconsole.error('Cache Only Error: ', error);\n\t\t\treturn reject(error);\n\t\t});\t\n\t});\n}\n\nexport function networkOnly(url) {\n\treturn new Promise(function(resolve) {\n\t\n\t// NUll AS SECOND PARAM BECAUSE THERE IS NO CACHING HAPPENING. \n\t// FALSE AS THIRD PARAM INDICATES THAT DATA SHOULDS NOT BE CACHED\n\t// ******* CONVER TO USING DECONSTRUCTED PARAMS TO AVOID THIS... *******\n\t\trequestFromNetwork(url, null, false).then(function(response){\n\t\t\tif(response) {\n\t\t\t\treturn resolve(response);\n\t\t\t}\n\t\t}, function(err){\n\t\t\tconsole.log('networkOnly request: error returned from requestFromNetwork', err);\n\t\t});\n\n\t}); \n}\n\n/* \n\tAll SW requests processed initially as fetch request so that SW can intercept and\n\thandle them using logic set up inside the SW...\n\tAs thei is simply a wrapper for a fetch request, the fetch request could also be made\n\tdirectly from the app.js code\n*/\nexport function loadViaServiceWorker(url) {\n\treturn new Promise(function(resolve) {\n\t\tfetch(url).then(function(response) {\t\t\t\n\t\t\t\n\t\t\t// If the response is a Response Object, convert it to JSON\n\t\t\tif(response.constructor == Response){\n\t\t\t\tresponse = response.json();\n\t\t\t}\n\t\t\treturn response;\n\t\t}).then(function(response){\n\t\t\t\n\t\t\t// if response is not an array, wrap it inside an array so that user always receives back an array of objects\n\t\t\tif (response.constructor !== Array ) {\n\t\t\t\tresponse = [response];\n\t\t\t}\n\t\t\tconsole.log('returning from requestViaServiceWorker', response);\n\t\t\treturn resolve(response);\n\t\t}).catch(function(error){\n\t\t\tconsole.log('error in requestViaServiceWorker', error);\n\t\t});\n\t});\n}\n\nexport function loadImage(element, cacheName, loadAsBgImg=false) {\n\tlet source = storageInstances[cacheName];\n\tlet requestHandler = requestHandlers[source._config.requestMethod];\n\tlet requestKey = element.getAttribute('dataloader-src');\n\n\tif(requestKey) {\n\t\trequestHandler(requestKey, cacheName, requestKey).then(function(response){\n\t\t\tlet url = window.URL.createObjectURL(response[0]);\n\t\t\tif (loadAsBgImg) {\n\t\t\t\telement.style.background=`url(${url}) center / cover`;\n\t\t\t} else {\n\t\t\t\telement.setAttribute('src', url);\n\t\t\t}\t\n\t\t}).catch(function(err){\n\t\t\tconsole.log('dataloaders: error processing images in loadImages', err);\n\t\t});\n\t} else {\n\t\tconsole.log(['dataloader error: loadImage funtion failed: dataloader-src attribute not found on the target element']);\n\t}\n}\n\n/* \n\tCache src content for css and js files so taht they can be loaded from the cache when the\n\tnetwork is offline\n*/\nexport function cacheFile(url) {\n\t\trequestFromNetwork(url, 'staticFileStore').then(function(){\n\t\t})\n}\n\n/* \n\tLoad stored CSS file content from the cache when the user is offline.\n\tUsed on the fallback page\n*/\nexport function loadCssFile(url, cacheName='staticFileStore') {\n\n\tconsole.log('load css target is: ', url);\n\n\tlet source = storageInstances['staticFileStore'];\n\tlet requestHandler = requestHandlers[source._config.requestMethod];\n\tlet requestKey = url;\n\t\n\tlet el = document.createElement('link');\n\tel.type = 'text/css';\n\tel.rel = 'stylesheet';\n\n\tif (requestKey && source) {\n\t\tconsole.log(`loading css file from ${cacheName}: ${url}`);\n\t\trequestHandler(cacheName, requestKey).then(function(response){\n\t\t\tlet fileBlob = window.URL.createObjectURL(response[0]);\n\t\t\tel.href = fileBlob;\n\t\t\tconsole.log('this is the link tag element to be added', el);\n\t\t\tdocument.head[0].insertBefore(el, document.head.firstChild);\n\t\t}).catch(function(error){\n\t\t\tel.href = url;\n\t\t\tconsole.log (`error retrieving ${url} from cache. `, error);\n\t\t\tdocument.head[0].insertBefore(el, document.head.firstChild);\n\t\t})\n\t} else {\n\t\tconsole.log(['dataloader error: loadCssFile function failed: href attribute not found on the target element or the storageCache requested does not exist']);\n\t}\n}\n\n/* \n\tLoad stored JS file content from the cache when the user is offline.\n\tUsed on the fallback page\n*/\nexport function loadScript(url, cacheName='StaticFileStore') {\n\t\n\tlet source = storageInstances['staticFileStore'];\n\tlet requestHandler = requestHandlers[source._config.requestMethod];\n\tlet requestKey = url;\n\n\tif(requestKey) {\n\t\tlet newElement = document.createElement('script');\n    newElement.type = 'text/javascript';\n\t\trequestHandler(requestKey, cacheName, requestKey).then(function(response){\n\t\t\tlet fileBlob = window.URL.createObjectURL(response[0]);\n\t\t\tconsole.log('returning the script from the cache', url);\n\t\t\tnewElement.src = fileBlob;\n\t\t\tdocument.body.appendChild(newElement);\n\t\t}).catch(function(err){\n\t\t\tconsole.log('dataloaders: error processing script in loadScript', err);\n\t\t});\n\t} else {\n\t\tconsole.log(['dataloader error: loadScript function failed: dataloader-src attribute not found on the target element']);\n\t}\n}\n\nexport function cachePage(urlPath, pageContent) {\n\treturn new Promise(function(resolve) {\n\t\tlet pageStoreParams = {\n\t\t\tcacheName: 'pageStore',\n\t\t\ttimeoutInSeconds: 2,\n\t\t\tmaxEntries: 50,\n\t\t\tmaxAge: 3600000000,\n\t\t\tuseAsKey: 'url',\n\t\t\trequestMethod: 'cacheOnly'\n\t\t};\n\n\t\tif(!storageInstances['pageStore']) {\n\t\t\tsetStorageInstance(pageStoreParams);\n\t\t}\n\t\t\n\t\tlet data = storageInstances['pageStore'].setItem(urlPath, pageContent);\n\t\tresolve(data);\n\t});\n}\n\nexport function requestFromNetwork(url, cacheName, shouldCache=true) {\n  return new Promise(function(resolve, reject) {\n\n    var request = new XMLHttpRequest();\n    let responseType = 'text';\n\n    // Change this to look up the storageInstance and look for an instance property that is set \n    // to image or something like that if the item should be treated as an image...\n    if (cacheName == 'imageStore' || cacheName == 'staticFileStore') {\n\t\t\tresponseType = 'blob';  \t\n    }\n    \n    request.onreadystatechange = function() {\n\n      if (request.readyState === XMLHttpRequest.DONE && request.status === 200) {\n        if (request.status === 200) {\n\t\t\t\t\tlet response;\n\t\t\t\t\t\n\t\t\t\t\tif (request.response instanceof Blob) {\n\t\t\t\t\t\tresponse = request.response;\n\t\t\t\t\t} else {\t\n\t\t\t\t\t\tresponse = JSON.parse(request.response);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response.constructor !== Array) {\n\t\t\t\t\t\tresponse = [response];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// shouldCache provides option to avoid storing data from network requests when required\n\t\t\t\t\t// used by networkOnly requests to avoid unnecessary storage of items\n\t\t\t\t\tif(shouldCache) {\n\t\t\t\t\t\t// console.log('triggering data caching', url);\n\t\t\t\t\t\tupdateCache(cacheName, response, url);\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(response);\n          \n        }\n      }\n    };\n\n    request.onerror = function() {\n      reject(Error('There was a network error.'));\n    };\n\n    request.open('GET', url, true);\n    request.responseType = responseType; \n    request.send();\n  });\n}\n\nfunction requestFromCache(cacheName, cacheKey) {\n\tlet cacheInstance = storageInstances[cacheName];\n\treturn new Promise(function(resolve, reject) {\n\t\t\n\t\tlet resultSet = [];\n\n\t\tif (typeof cacheName === undefined) {\n\t\t\treject(Error(`${cacheName} is not a valid localforage store`));\n\t\t}\n\t\t\n\t\tif (cacheKey) {\n\t\t\tgetItem(cacheInstance, cacheKey);\n\t\t} else {\n\t\t\tgetAllItems(cacheInstance);\n\t\t}\n\t\t\n\t\tfunction getItem(cacheInstance, cacheKey) {\n\t\t\treturn cacheInstance.getItem(cacheKey).then(function(response) {\n\t\t\t\tif(response && response != null) {\n\t\t\t\t\tresultSet.push(response);\n\t\t\t\t}\n\t\t\t\tif(resultSet.length > 0) {\n\t\t\t\t\treturn resolve(resultSet);\n\t\t\t\t} \n\n\t\t\t\t// Return empty resolve when no results found so promise is finished and \n\t\t\t\t// requesting method can handle next steps.\n\t\t\t\treturn resolve();\n\n\t\t\t}).catch(function(err) {\n\t\t\t\treturn reject(Error(`getItem errored out: ${err}`));\n\t\t\t});\n\t\t}\n\n\t\tfunction getAllItems(cacheInstance) {\n\t\t\treturn cacheInstance.length(function(err, numberOfKeys){\n\t\t\t\tif (numberOfKeys > 0) {\n\t\t\t\t\tcacheInstance.iterate(function(value, key, iterationNumber) { // eslint-disable-line no-unused-vars\n\t\t\t\t\t\tresultSet.push(value);\n\t\t\t\t\t}).then(function() {\n\t\t\t\t\t\tif (resultSet.length != -1) {\n\t\t\t\t\t\t\treturn resolve(resultSet);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t}).catch(function(err) {\n\t\t\t\t\t\treturn reject(Error(`requestFromCache: getAllItems errored out: ${err}`));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Resolve to nothing so that cache requests can handle responses without a result correctly\n\t\t\t\t\treturn resolve();\n\t\t\t\t}\n\t\t\t});\t\n\t\t}\n\n\t});\n}\n\n/* \n\tADDS AN OBJECT TO STORAGEINSTANCES VARIABLE\n\tFOR EACH LOCALFORAGE INSTANCE CREATED. THESE OPTIONS ARE USED TO SET USER\n\tCONTROLLED PARAMS FOR DATA REQUESTS (timeooutInSecond, maxEntries, etc)\n*/\n\n// may need to restructure to make sure these operations occur\n// in the right sequence every time....\nfunction updateCache(cacheName, data, keyFieldValue) {//eslint-disable-line\n\t\n\tnew Promise(function(resolve){\n\t\t\tlet cacheInstance = storageInstances[cacheName];\n\n\t\t\texpireOldItems(cacheName);\n\n\t\t\tfor(let x=0; x < data.length; x++ ) {\n\t\t\t\tlet item = data[x];\n\n\t\t\t\t// SET AN EXPIRY TIME ON THE ITEM\n\t\t\t\tsetItemExpiry(cacheInstance._config.maxAge, item);\n\n\t\t\t\tlet keyToUse = {};\n\n\t\t\t\t// check if useAsKey field for the instance is a field in the data item\n\t\t\t\tif(item[cacheInstance._config.useAsKey]) {\n\t\t\t\t\t// if yes, use that field as the key\n\t\t\t\t\tkeyToUse = item[cacheInstance._config.useAsKey];\n\t\t\t\t\tkeyToUse = keyToUse.toString();\n\t\t\t\t} else {\n\t\t\t\t\t// if not use the keyFIeldValue provided in the call updateCache\n\t\t\t\t\tkeyToUse = keyFieldValue;\n\t\t\t\t}\n\n\t\t\t\tcacheInstance.setItem(keyToUse, item);\n\t\t\t}\n\n\t\t\tmanageCacheSize(cacheName);\n\t\t\tresolve();\n\t});\n}\n\n/* \n\tSETS THE EXPIRY TIME ON EVERY ITEM ADDED TO A CACHE IN MILLISECONDS\n\tNEED TO FIND OUT IF THIS IS EFFICIENT WHEN DONE VIA A LOOP OR NOT\n*/\nfunction setItemExpiry(maxAge, item){\n\titem.dataloaderExpiryTime = Date.now() + maxAge;\n}\n\n/* \n\texpires items from the cache if the items dataloaderExpiryTime has passed\n*/\nfunction expireOldItems(cacheName) {\n\tlet cacheInstance = storageInstances[cacheName];\n\tcacheInstance.iterate(function(value, key){\n\t\tlet val = value;\n\t\t// console.log('value', val);\n\t\t// if(key == 1) {\n\t\t// \tval.dataloaderExpiryTime = 10000;\n\t\t// }\n\t\tif(val.dataloaderExpiryTime < Date.now()) {\n\t\t\tconsole.log(`removing expired item ${key} from ${cacheName}`);\n\t\t\t// NOT SUR3E THE THEN FUNCTION IS NEEDED HERE ....\n\t\t\tcacheInstance.removeItem(key).catch(function(err){\n\t\t\t\tconsole.log('could not remove item from cache: ', err);\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction manageCacheSize(cacheName) {\n\tlet cacheInstance = storageInstances[cacheName];\n\tif(cacheInstance._config.maxEntries !== null) {\n\t\tcacheInstance.length().then(function(numberOfEntries){\n\t\t\tlet entriesOverLimit = numberOfEntries - cacheInstance._config.maxEntries;\n\t\t\tlet itemArray = [];\n\t\t\tif (entriesOverLimit > 0){\n\t\t\t\tcacheInstance.iterate(function(value) {\t\t\t\t\t\n\t\t\t\t\titemArray.push(value);\t\n\t\t\t\t}).then(function() {\n\t\t\t\t\t// sorts the items into ascending order by expiry data (closest expiry first)\n\t\t\t\t\titemArray.sort(function (a, b) {\n\t\t\t\t\tif (a.dataloaderExpiryTime > b.dataloaderExpiryTime) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (a.dataloaderExpiryTime < b.dataloaderExpiryTime) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\t// a must be equal to b\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\t// slices entries from the start of the array\n\t\t\t\titemArray = itemArray.slice(0, entriesOverLimit);\n\n\t\t\t\t// NEED TO LOOP THROUGH AND REMOVE ITEMS LEFT IN THE ITEMS ARRAY FROM THE CACHE...\n\n\t\t\t\tconsole.log(`removing ${itemArray.length} items from the cache: `, itemArray);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log('entries are less than maxEntries', numberOfEntries, cacheInstance._config.maxEntries);\n\t\t\t} \n\t\t});\n\t} else {\n\t\t\tconsole.log('no maxEntries set on this cache', cacheInstance);\n\t\t\treturn;\n\t\t}\n}\n\n/* \n\tTHIS IS OBSERVER FOR ANY ELEMENT ADDED EVENTS THE USER WANTS TO INTERCEPT. \n\tIT SHOULD BE CHANGED TO:\n\t\t1. MOVE THE SUPPORTING METHODS INTO A SUBMODULE FOR CODE ORGANIZATION\n\t\t2. SET UP A DEFAULT OR BACKUP FOR USE WHEN MUTUATIONOBSERVER IS NOT AVAILABLE IN THE BROWSWER....\n*/\nvar listeners = [], \ndoc = window.document, \nMutationObserver = window.MutationObserver || window.WebKitMutationObserver,\nobserver;\n\nexport function detectElementAdded(selector, fn) {//eslint-disable-line\n    // Store the selector and callback to be monitored\n    listeners.push({\n        selector: selector,\n        fn: fn\n    });\n    if (!observer) {\n        // Watch for changes in the document\n        observer = new MutationObserver(check);\n        observer.observe(doc.documentElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n    // Check if the element is currently in the DOM\n    check();\n}\n    \nfunction check() {//eslint-disable-line\n    // Check the DOM for elements matching a stored selector\n    for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {\n        listener = listeners[i];\n        // Query for elements matching the specified selector\n        elements = doc.querySelectorAll(listener.selector);\n        for (var j = 0, jLen = elements.length, element; j < jLen; j++) {\n            element = elements[j];\n            // Make sure the callback isn't invoked with the \n            // same element more than once\n            if (!element.ready) {\n                element.ready = true;\n                // Invoke the callback with the element\n                listener.fn.call(element, element);\n            }\n        }\n    }\n}\n/* eslint-disable */"]}